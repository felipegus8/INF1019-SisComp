Felipe Viberti - 1510384

Questão 1)Faça um programa para localizar determinado valor em um vetor de inteiros desordenado. O programa deve ser composto por no mínimo 4 processos filhos, em um mesmo nível, que devem ser responsáveis por procurar o valor em uma parte do vetor cada. Ao encontrar o valor, o processo deve imprimir:Filho <PID> Encontrou na posição # do vetor. Caso o processo não encontre, deve imprimir:Filho <PID> Não encontrou ocorrência do valor. Explique o funcionamento do seu código.

-----------------------------------------------------

Arquivo .c:
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <unistd.h>

void childFunction(int vetor[],int inicial,int final,int valor){
    int found = 0;
     printf("Filho : %d\n", getpid());
     for(int i = inicial;i < final;i++) {
     printf("Inicial:%d,Final:%d\n",inicial,final);
     if (vetor[i] == valor) {
      found = 1;
      printf("Encontrou na posicao %d do vetor\n",i);
    }
  }
      if (found != 1) {
      printf("Não encontrou ocorrência do valor\n");
   }
}

int main(){
    int qtdFilhos = 4,status;
    int pidAtual, i;
    int vetor[10] = {1,2,3,4,5,6,7,8};
    for(i=0; i<qtdFilhos; i++){
        switch(pidAtual = fork()){
            case 0:
                childFunction(vetor,2*i,(2*i) + 2,4);
                return 0;
            case -1:
            break;
            default:
                waitpid(-1,&status,0);
                break;
        }

    }
    wait(NULL);
    printf("Pai tem %d filhos\n", i);

    return 0;
}

-----------------------------------------------------

Auxiliar.Txt:
Não houve arquivo auxiliar nessa questão.

-----------------------------------------------------

Compilação e Execucação:
$ gcc -Wall -o ex1 lab2_1.c
$./ex1

-----------------------------------------------------

Resultado:
Filho : 807
Inicial:0,Final:2
Inicial:0,Final:2
Não encontrou ocorrência do valor
Filho : 808
Inicial:2,Final:4
Inicial:2,Final:4
Encontrou na posicao 3 do vetor
Filho : 809
Inicial:4,Final:6
Inicial:4,Final:6
Não encontrou ocorrência do valor
Filho : 810
Inicial:6,Final:8
Inicial:6,Final:8
Não encontrou ocorrência do valor
Pai tem 4 filhos

-----------------------------------------------------

Conclusão:
O for da main cria 4 processos filhos já que ele faz um fork em cada uma das 4 iterações.
Cada um dos filhos chama uma função que tenta encontrar um numero em um array dado um determinado intervalo.O que muda em cada chamada é o intervalo que é passado como parâmetro para a função.Ele é calculado em função do i do for.Em cada iteração, no processo pai eu espero o processo filho acabar garantindo que ele vai procurar no array na ordem determinada e que os prints na tela irão aparecer na ordem certa.No fim eu dou um wait(NULL) para que o ultimo print só seja executado após o final de todos os processos filhos.


-----------------------------------------------------

Questão 2) Faça um programa que deve realizar a soma de 2 matrizes 3 X 3. O programadeve ser estruturado em no mínimo 3 processos que fazem a soma de cada linha da matriz. Cada processo exibe, ao terminar a soma, os valores para a linha da matriz. Atenção para exibir as linhas na ordem correta. Explique o funcionamento do seu código. Explique como você controla a exibição de cada linha da matriz na ordem correta.

-----------------------------------------------------

Arquivo .c:
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <unistd.h>

void childFunction(int matriz1[3][3],int matriz2[3][3],int linha){
    int linharesult[3] = {0,0,0};
    for (int i = 0;i < 3;i++) {
     linharesult[i] = matriz1[linha][i] + matriz2[linha][i]; 
  }
  printf("Linha %d da Matriz:\t%d\t%d\t%d\n",linha,linharesult[0],linharesult[1],linharesult[2]);
}

int main(){
    int qtdFilhos = 3,status;
    int pidAtual, i;
    int matriz1[3][3] = {{3,4,5},{6,7,8},{9,10,11}};
    int matriz2[3][3] = {{1,2,3},{3,4,5},{6,7,8}};
    for(i=0; i<qtdFilhos; i++){
        switch(pidAtual = fork()){
            case 0:
                childFunction(matriz1,matriz2,i);
                return 0;
            case -1:
            break;
            default:
                waitpid(-1,&status,0);
                break;
        }
    }
    
    wait(NULL);
    printf("Pai tem %d filhos\n", i);
    return 0;
}

-----------------------------------------------------

Auxiliar .txt:
Não houve arquivo auxiliar nessa questão.

-----------------------------------------------------

Compilação e Execução:
$gcc -Wall -o ex2 lab2_2.c
$./ex2

-----------------------------------------------------

Resultado:
Linha 0 da Matriz:	4	6	8
Linha 1 da Matriz:	9	11	13
Linha 2 da Matriz:	15	17	19
Pai tem 3 filhos

-----------------------------------------------------

Conclusão:
O for da main cria 3 processos filhos já que ele faz um fork em cada uma das 3 iterações.Cada um dos filhos chama a função que calcula a soma das matrizes mudando apenas a linha da matriz que se quer somar em cada iteração.Em cada iteração, no processo pai eu espero o processo filho acabar garantindo que os prints na tela irão aparecer na ordem certa.No fim eu dou um wait(NULL) para que o último print só seja executado após o final de todos os processos filhos.

-----------------------------------------------------

Questão 3)Faça um programa que simule a SHELL, ou seja, o programa fica aguardando comandos, ao receber um comando, o processo pai se duplica e designa a execução do comando ao filho. Quando o filho acaba de executar, o pai volta a esperar um novo comando.a) Teste para os seguintes comandos:ls - Lista os arquivos/diretórios do diretório correnteps - exibe os processos que estão executando no momento pwd - exibe o diretório atualO seu programa deve permitir a execução de comandos com argumentos.b) Testeparaosseguintescomandos:echo "Escreva uma mensagem aqui" - exibe a mensagem entre aspascat "nome de um arquivo" - exibe o contéudo do arquivo cujo nome é passado no parâmetrogrep "palavra" "nome de um arquivo" - exibe as ocorrências da palavradentro do arquivo informadoc) Escreva um programa qualquer, compile-o e utilize o programa SHELL para executá-lo.Explique o funcionamento do seu código.

-----------------------------------------------------

Arquivo .c:
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>


int main(void){
    
    
    char *argv[100],entry[100],*token;
    int status,i = 0,pidAtual;
    
    while(1){
        strcpy(entry, "");
        
        printf("Minha Shell >> ");
        scanf("%[^\n]%*c", entry);
        
        if (strcmp(entry,"exit") == 0 || strcmp(entry,"") == 0) {
            exit(1);
        }
        token = strtok(entry," \"");
        
        for(i=0;token!= NULL;i++) {
            argv[i] = token;
            token = strtok(NULL," \"");
        }
        
        argv[i] = NULL;
        
        switch(pidAtual = fork()) {
            case 0:
            execvp(argv[0], argv);
            default:
            waitpid(-1,&status,0);
            i = 0;
        }
        
    }
    return 0;
}


-----------------------------------------------------

Auxiliar .txt:
Não houve arquivo auxiliar nessa questão.

-----------------------------------------------------

Compilação e Execução:
$gcc -Wall -o ex3 lab1_3.c
$./ex3

-----------------------------------------------------

Resultado:
Minha Shell >> ls
Relatorio_2_SisComp.txt	ex1.c			ex3
ex1			ex2.c			ex3.c
HelloWorld.txt


Minha Shell >> ps
  PID TTY           TIME CMD
 7445 ttys001    0:00.12 -bash
 7477 ttys001    0:00.00 ./ex3
 7506 ttys001    0:00.00 ./ex3
 7574 ttys001    0:00.00 ./ex3
 7655 ttys001    0:00.00 ./ex3


Minha Shell >> pwd
/Users/felipeviberti/Desktop/SisComp/Lab2


Minha Shell >> echo Hello World
Hello World

Minha Shell >> cat Hello World.txt
Hello World

Minha Shell >> grep waitpid ex3.c
            waitpid(-1,&status,0);

Minha Shell >> ./ex1
Filho : 7690
Inicial:0,Final:2
Inicial:0,Final:2
Não encontrou ocorrência do valor
Filho : 7691
Inicial:2,Final:4
Inicial:2,Final:4
Encontrou na posicao 3 do vetor
Filho : 7692
Inicial:4,Final:6
Inicial:4,Final:6
Não encontrou ocorrência do valor
Filho : 7693
Inicial:6,Final:8
Inicial:6,Final:8
Não encontrou ocorrência do valor
Pai tem 4 filhos


-----------------------------------------------------

Conclusão:
No início eu leio uma string com os comandos e armazeno em entry.Primeiro eu verifico se essa string é exit ou se é um espaço em branco.Se for eu termino o programa.Se não eu uso a função strtok que é uma função padrão da biblioteca string.h que recebe uma string e um delimitador.Ela retorna uma série de tokens que são a string quebrada pelo delimitador.(Protótipo da função:char *strtok(char *str, const char *delim)).Essa função só precisa receber a string inicial 1 vez.Depois para continuar iterando sobre ela basta passar NULL como o primeiro parâmetro.Depois disso temos  o comando a ser executado em argv[0] e o resto do que foi digitado no segundo parâmetro.Usei o execvp porque ele já pega o path pra mim.
