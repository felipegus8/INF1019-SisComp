Felipe Viberti - 1510384

Questão 1)Faça um programa para criar dois processos que se comunicam via pipe. O Pai lê do pipe enquanto o filho escreve no pipe. Exiba o resultado do que foi escrito e lido.
-----------------------------------------------------

Arquivo .c:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int main (void) {
  int fd[2],dadosescritos,dadoslidos;
  pipe(fd);
  const char textoDoPipe[] = "Testando Pipe";
  char textoLido[sizeof textoDoPipe];
  if (fork() == 0) {
    //filho
    dadosescritos = write(fd[1],textoDoPipe,strlen(textoDoPipe) + 1);
      printf("%d dados escritos:%s\n",dadosescritos,textoDoPipe);
  }
  else {
    dadoslidos = read(fd[0],textoLido,sizeof textoLido);
    printf("%d dados lidos: %s\n",dadoslidos,textoLido);
  }
  close(fd[0]);
  close (fd[1]);

  return 0;
}

-----------------------------------------------------

Auxiliar.Txt:
Não houve arquivo auxiliar nessa questão.

-----------------------------------------------------

Compilação e Execucação:
$ gcc -g -Wall -o ex1 Lab6_1.c 
$ ./ex1

-----------------------------------------------------

Resultado:
14 dados escritos:Testando Pipe
14 dados lidos: Testando Pipe

-----------------------------------------------------

Conclusão:
Eu faço um fork onde, no filho eu mando que ele escreva no pipe e dê print no que ele escreveu e no pai ele leia o que o filho escreveu.Como o evento é síncrono tudo funcionou sem problemas.


-----------------------------------------------------

Questão 2) Faça um programa para redirecionar a entrada e a saída, lendo os dados de um arquivo e gerando a saída em outro.

-----------------------------------------------------

Arquivo .c:
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>


int main() {

	int entrada, saida;
	char string[100];

	if ((entrada = open("entrada.txt", O_RDWR | O_CREAT, 0666)) == -1) {
		return -1;
	}

	if ((saida = open("saida.txt", O_RDWR | O_CREAT | O_TRUNC, 0666)) == -1) {
		return -1;
	}
	close(0);

    dup(entrada);

	scanf(" %[^\n]", string);
	close(0);

    dup2(saida,1);
	
	printf("%s \n", string);

	return 0;
}

-----------------------------------------------------

Auxiliar .txt:

entrada.txt:
Teste Redirecionamento
-----------------------------------------------------

Compilação e Execução:
$ gcc  -Wall -o ex2 Lab6_2.c 
$ ./ex2
-----------------------------------------------------

Resultado:
Arquivo saida.txt:
Teste Redirecionamento 
-----------------------------------------------------

Conclusão:
Primeiro eu abro o arquivo de entrada e o arquivo de saída.Depois eu faço um dup do arquivo de entrada para que em vez de o scanf pegar o que está no console ele pegue o que está no arquivo entrada.txt.E por fim eu dou um dup2 na saída para que o printf também seja redirecionado para o arquivo saida.txt .O resultado disso é que ele vai copiar o que está no arquivo entrada.txt para o arquivo saida.txt.


-----------------------------------------------------

Questão 3)Faça um programa para criar um pipe e executar dois processos que são utilitários do Unix que se comuniquem através do pipe criado (a shell faz isso).
                        
-----------------------------------------------------

Arquivo .c:
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>

int main(void)
{
    int fd[2]; // descritor dos pipes

    pipe(fd);
    if(fork() == 0) {
        close(fd[0]);
        dup2(fd[1], 1);  // Redireciona stdout para o pipe de escrita
        system("ls");
    }
    else {
    close(fd[1]);
    dup2(fd[0], 0); // Redireciona o stdin para o pipe de leitura
    system("cat");
    }
    return 0;
}


-----------------------------------------------------

Auxiliar .txt:
Não houve arquivo auxiliar nessa questão.

-----------------------------------------------------

Compilação e Execução:
$ gcc  -Wall -o ex3 Lab6_3.c 
$ ./ex3
-----------------------------------------------------

Resultado:
Lab6_1.c
Lab6_2.c
Lab6_3.c
Relatorio_6_SisComp.txt
entrada.txt
ex1
ex1.dSYM
ex2
ex2.dSYM
ex3
saida.txt
-----------------------------------------------------

Conclusão:
No início eu abri o pipe e criei um processo filho. O processo filho fechou o pipe de leitura , redirecionou a saída (stdout) para o pipe de escrita (através do dup2 em fd[1]), e executou o comando ls, para listar os documentos presentes na pasta corrente.No processo pai eu fechei o pipe de escrita e o stdin foi redirecionado para o pipe de leitura (através do dup2 em fd[0]).Depois foi executado o comando cat, e foi exibido no console a lista dos documentos presentes na pasta corrent. O equivalente a isto na shell seria executar ls | cat.


